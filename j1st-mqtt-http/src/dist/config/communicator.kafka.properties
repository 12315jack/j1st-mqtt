# Kafka communicator configuration
# Communicator
# Communicator implementation (full qualified class name)
communicator.class=com.github.longkerdandy.mithqtt.communicator.kafka.broker.KafkaBrokerCommunicator
# This is the topic prefix that broker instance consume. (full topic is like mithqtt.broker.{brokerId})
communicator.broker.topic=mithqtt.broker
# This is the topic that processor will pass message to 3rd party application
communicator.application.topic=mithqtt.application
# Kafka
# A list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
# The client will make use of all servers irrespective of which servers are specified here for bootstrapping&mdash;
# this list only impacts the initial hosts used to discover the full set of servers. This list should be in the form
# <code>host1:port1,host2:port2,...</code>. Since these servers are just used for the initial connection to
# discover the full cluster membership (which may change dynamically), this list need not contain the full set of
# servers (you may want more than one, though, in case a server is down)."
bootstrap.servers=localhost:9092
# Kafka Producer
# The number of acknowledgments the producer requires the leader to have received before considering a request complete. This controls the
# durability of records that are sent. The following settings are common:
# <ul>
# <li><code>acks=0</code> If set to zero then the producer will not wait for any acknowledgment from the
# server at all. The record will be immediately added to the socket buffer and considered sent. No guarantee can be
# made that the server has received the record in this case, and the <code>retries</code> configuration will not
# take effect (as the client won't generally know of any failures). The offset given back for each record will
# always be set to -1.
# <li><code>acks=1</code> This will mean the leader will write the record to its local log but will respond
# without awaiting full acknowledgement from all followers. In this case should the leader fail immediately after
# acknowledging the record but before the followers have replicated it then the record will be lost.
# <li><code>acks=all</code> This means the leader will wait for the full set of in-sync replicas to
# acknowledge the record. This guarantees that the record will not be lost as long as at least one in-sync replica
# remains alive. This is the strongest available guarantee.
acks=1
# Kafka Consumer
# THIS ONLY WORKS FOR APPLICATION COMMUNICATOR
# A unique string that identifies the consumer group this consumer belongs to.
# This property is required if the consumer uses either the group management functionality
# by using <code>subscribe(topic)</code> or the Kafka-based offset management strategy.
group.id=